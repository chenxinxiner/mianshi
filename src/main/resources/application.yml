server:
  port: 8001

spring:
  application:
    name: cloud-payment-service

  datasource:
    username: zou
    password: 19950813
    url: jdbc:mysql://124.70.198.176:3306/payment?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    ###################以下为druid增加的配置###########################
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 下面为连接池的补充设置，应用到上面所有数据源中
      # 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
      initial-size: 5
      # 最大连接池数量
      max-active: 20
      # 最小连接池数量
      min-idle: 5
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，
      # 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
      max-wait: 60000
      # 也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
      pool-prepared-statements: false
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
      # 在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。
      # 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
      validation-query: select 'x'
      # 单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法
      validation-query-timeout: 5
      # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。(默认为true)
      test-on-borrow: false
      # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。(默认为false)
      test-on-return: false
      # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。
      keepAlive: false
      # 有两个含义：(默认一分钟)
      #1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      #2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      time-between-eviction-runs-millis: 60000
      # 连接保持空闲而不被驱逐的最小时间
      # min-evictable-idle-time-millis:

      # StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      # 配置监控服务器
      stat-view-servlet:
        enabled: true
        login-username: admin
        login-password: 123456
        # 禁止手动重置监控数据
        reset-enable: false
        url-pattern: /druid/*
        # 添加IP白名单
        #allow:
        # 添加IP黑名单，当白名单和黑名单重复时，黑名单优先级更高
        #deny:
      web-stat-filter:
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤格式
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
  #      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
  #      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
  #      # 合并多个DruidDataSource的监控数据
  #      useGlobalDataSourceStat: true

mybatis:
  type-aliases-package: cn.chenxinzouzou.mall.payment.entities
  mapper-locations: classpath:mapper/read/*.xml,classpath:mapper/write/*.xml

eureka:
  client:
    # 表示是否将自己注册进EurekaServer 默认为true
    register-with-eureka: true
    # 是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所有，集群必须设置为true才能配合ribbon使用负载均衡
    fetch-registry: true
    service-url:
      # 到哪里去注册
#      defaultZone: http://localhost:7001/eureka
      defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka
  instance:
    # 服务显示名（一般添加端口）
    instance-id: payment8001
    # 鼠标悬浮显示IP地址
    prefer-ip-address: true